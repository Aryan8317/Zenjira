name: Merge PR

on:
  repository_dispatch:
    types: [merge-command]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Merge pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if this is a valid slash command dispatch event
            if (!github.event.client_payload || !github.event.client_payload.slash_command) {
              console.log('❌ This workflow should only be triggered by slash command dispatch events');
              core.setFailed('Invalid event trigger - expected slash command dispatch');
              return;
            }
            
            const slashCommand = github.event.client_payload.slash_command;
            const actor = slashCommand.actor;
            
            // Simple authorization check - only allow va16hav07
            if (actor !== 'va16hav07') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: slashCommand.issue.number,
                body: `❌ @${actor}, you are not authorized to merge. Only va16hav07 can use the /merge command.`
              });
              core.setFailed(`User ${actor} is not authorized to merge.`);
              return;
            }
            
            const issue = slashCommand.issue;
            if (!issue.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `❌ The /merge command can only be used on pull requests.`
              });
              core.setFailed('Not a pull request');
              return;
            }
            
            const prNumber = issue.number;
            
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'merge'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `✅ Pull request merged successfully by @${actor}.`
              });
            } catch (error) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `❌ Failed to merge pull request: ${error.message}`
              });
              core.setFailed(error.message);
            }
