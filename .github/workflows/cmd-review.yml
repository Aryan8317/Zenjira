name: Request Review

on:
  repository_dispatch:
    types: [review-command]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Request review from user
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if this is a valid slash command dispatch event
            if (!context.payload || !context.payload.client_payload || !context.payload.client_payload.slash_command) {
              console.log('❌ This workflow should only be triggered by slash command dispatch events');
              core.setFailed('Invalid event trigger - expected slash command dispatch');
              return;
            }
            
            const slashCommand = context.payload.client_payload.slash_command;
            const args = slashCommand.args.unnamed;
            const user = args && args.length > 0 ? args[0] : null;
            
            console.log('✅ Slash command detected');
            console.log('Command:', slashCommand.command);
            console.log('Actor:', slashCommand.actor);
            console.log('Args:', args);
            
            // Get issue data from the repository dispatch event
            const issue = context.payload.client_payload.github.payload.issue;
            const issueNumber = issue.number;
            
            if (!user) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `❌ Please mention a user to request review. Usage: \`/review @username\``
              });
              core.setFailed('No user mentioned');
              return;
            }
            
            if (!issue.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `❌ The /review command can only be used on pull requests.`
              });
              core.setFailed('Not a pull request');
              return;
            }
            
            const username = user.replace(/^@/, '');
            
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: issueNumber,
                reviewers: [username]
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `✅ Requested review from @${username}.`
              });
            } catch (error) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `❌ Failed to request review from @${username}: ${error.message}`
              });
              core.setFailed(error.message);
            }
